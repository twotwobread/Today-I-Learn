# 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 
# 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 
# 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.
# 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
# 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.
#
# 제한사항
# 전체 학생의 수는 2명 이상 30명 이하입니다.
# 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
# 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
# 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
# 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.

def solution(n, lost, reserve):
    temp = set()
    lost.sort(); reserve.sort()
    for i in lost:
        if i in reserve:
            reserve.remove(i); temp.add(i) 
    for i in lost:
        if i-1 in reserve:
            reserve.remove(i-1); temp.add(i) 
        elif i+1 in reserve:
            reserve.remove(i+1); temp.add(i)   
    return n - (len(lost)-len(temp))

# 먼저 반복문으로 lost와 reserve 둘다 있는것을 먼저 처리 하지 않으면 다른 학생에 의해 reserve에서 삭제되어 제대로 된 처리가 되지 않을 수 있다.
# 두번째로 직면했던 문제는 lost안에도 있고 reserve안에도 있는 것을 for문을 돌리면서 중복하기 싫어서 lost도 마찬가지로 remove를 했는데
# for문을 돌면서 없어지니까 모든 원소에 접근하지 못하여 제대로 된 반복문이 되지 않는다.
# 세번째로 temp에 원소를 추가할때 중복되는 것을 막기위해 set을 이용했다.
# 마지막으로 lost, reserve를 정렬하지 않으면 제대로 된 풀이가 되지 않는다. 어짜피 수만 세는 것이고 reserve 안에 있는지 확인하고 remove로 그 숫자에 해당하는 인덱스를 지우는데
# 왜 정렬을 해야만 하는지를 정확히 몰랐는데 문제를 제대로 읽어봐야한다.
# "최대값" 을 return을 해야하는데 만약 lost = [4, 2], reserve = [3, 5] 인 경우를 생각해보자. 이러면 4가 먼저 3에게 체육복을 빌리게 되는데 그럼 2는 빌리지 못하게 된다.
# 그럼 정렬을 하면 2가 먼저 빌리게 되고 4도 5에게 빌릴 수 있게 된다. 이것을 기억하자.
