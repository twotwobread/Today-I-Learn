# file name : 구현_문제13.py
# 치킨 배달
# 크기 N x N의 도시 존재. 1x1 칸으로 나누어져 있음.
# 도시의 각 칸은 빈칸, 치킨집, 집 중 하나이다. 도시의 칸은 (r, c)와 같은 형태로 나타내고
# r행 c열 또는 위에서부터 r번째 칸, 왼쪽에서부터 c번째 칸을 의미. r과 c는 1부터 시작
# 치킨거리는 집과 가장 가까운 치킨집 사이의 거리이다. 즉, 치킨거리는 집을 기준으로 정해지며, 각각의 집은 치킨 거리가 있다.
# 도시의 치킨거리는 모든 집의 치킨 거리의 합이다.
# |r1 - r2| + |c1 - c2|로 두 칸 사이의 거리를 구한다.
# 치킨집의개수는 최대 M개를 고르고 나머지는 폐업 어떻게 고르면
# 도시의 치킨거리가 가장 작게 될지를 구하는 프로그램 작성
# 2 <= N <= 50 과 1 <= M <= 13
# N개의 줄에 도시의 정보 / 0 = 빈칸, 1 = 집, 2 = 치킨집
# 집의 개수는 2N개를 넘지 않고 적어도 1개는 존재, 치킨집의개수는 M보다 크거나 같고 13보단 같거나 작다.
# author : Lee Suyoung (2022-02-07)

# 일단 집을 찾고 그 집에서 모든 치킨 집까지의 거리를 구하고 그걸 저장해놓고
# 저장된 치킨 거리를 다 더하면 끝이겠네
# 그럼 일단 맵을 다돌면서 집이랑 치킨집의 좌표만 따오고 거기서 치킨 거리를 찾자.
# 맵 다도는데 50 x 50 = 2500, 집 최대 100개 x 치킨 집 최대 13개 = 1300 정도에 치킨 거리 sum치는데 100이라치면 가능하겠네.
# 잠만 이러면 폐업을 안시키는데? 그럼 2개만 뽑아야한다. 근데 치킨집이 5개야 이경우 가장 쉽게 최소 비용 구하기 위해선
# 모든 집에서의 해당 치킨집까지의 치킨거리를 다 더해서 5개를 비교해야겠네.
# 그럼 각 치킨집까지의 도시의 치킨거리를 저장해놓고 낮은거 2개를 뽑는 형식으로 하면 되겠다.  
# 깨달았다. 도시의 치킨 거리는 각 집마다 젤 적은 거리를 더해야해 그럼 5개 중 2개를 뽑으면 그 두 개중에 집마다 적은 거리를 선택해서 더해야해

# n, m ( n은 맵의 크기, m은 최대 치킨집 수 ) 
from itertools import *
INF = int(1e9)

n, m = map(int, input().split())

graph = [[0]*(n+1) for i in range(n+1)]
home = []
chicken = []

# 도시 정보 입력
for i in range(1, n+1):
    num = list(map(int, input().split()))
    for j in range(1, n+1):
        graph[i][j] = num[j-1]
        # 집, 치킨집 좌표 저장
        if graph[i][j] == 1:
            home.append((i, j))
        elif graph[i][j] == 2:
            chicken.append((i, j))

# 키포인트는 도시의 치킨 거리 합이 가장 작은 m개의 치킨집 조합을 찾는 것이다.
# 그래서 아래처럼 조합을 만들어서 전부다 도시의 치킨 거리의 합을 비교해보고 가장 작은 값을 출력한다.
# combinations은 조합을 만든다 순서를 생각하지 않고 중복되지 않는다.
# permutations는 순열을 만들고 순서를 생각해서 (1,2), (2,1) 이런식으로 순서가 바뀌는 것까지 포함시킨다.

_chicken = combinations(chicken, m)
case = []
for c in _chicken:
    cityDist = 0
    for h in home:
        h_x, h_y = h
        chickDist = INF
        for i in c:
            c_x, c_y = i
            chickDist = min(chickDist, abs(h_x-c_x)+abs(h_y-c_y))
        cityDist += chickDist
    case.append(cityDist)

case.sort()
print(case[0])

