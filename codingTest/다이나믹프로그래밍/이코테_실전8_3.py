# file name : 이코테_실전8_3.py
# 개미 전사
# 메뚜기 마을에는 여러 개의 식량창고 존재, 일직선으로 이어져있음.
# 각 식량창고에는 정애진 수의 식량을 저장하고 있고 개미 전사는 선택적으로 약탈하여 식량을 빼앗을 예정
# 일직선상에 존재하는 식량창고 중 서로 인접한 식량창고가 공격받으면 바로 알아챔.
# 따라서 들키지 않기위해선 최소한 한 칸 이상 떨어진 식량창고 약탈해야함.
# ex) {1,3,1,5} 2,4번째 식량 창고를 선택하면 최대값인 8개 빼앗을 수 있음.
# 식량창고 N개에 대한 정보가 주어진 경우 얻을 수 있는 식량의 최댓값 출력
# 3 <= N <= 100 식량 창고 개수, 0 <= K <= 1,000 식량 창고에 저장된 식량 개수 
# author : Lee Suyoung (2022-02-03)
'''
결국 생각해보면 처음 식량 창고 선택할지, 다음 식량 창고 선택할지 이기때문에
바텀업으로 생각해보자.
'''

# n 입력받기
n = int(input())
# k 입력 받기
k = list(map(int, input().split()))

d = [0] * 101 # 개미 굴 만큼 dp table 초기화.

for i in range(1, n+1):
    if i == 1:
        d[i] = k[i-1]
    else:
        d[i] = max(d[0:i-1]) + k[i-1] # 현재 위치에서 두칸 떨어진 곳 까지 중 가장 큰 것을 선택한다.

# 일단 나의 생각으로는 문제가 없다고 생각이 들어서 다른 사람들의 의견을 들어봐야할 것 같다.

print(max(d))

### [ 제시된 답안 ] ###
# 사실 생각해야하는 경우가 단 2가지이다.
# 지금 현재 위치에서 두칸 뒤에꺼를 약탈하고 현재 위치까지 약탈하는 방법과
# 현재 위치는 약탈 안하고 한칸 뒤에꺼를 약탈하는 경우, 그래서 이 두가지 중 뭐가 더 큰지를 생각
# Ai = max(Ai-1, Ai-2+Ki) 점화식은 이와 같다.

n = int(input())

array = list(map(int, input().split()))

d = [0] * 100
d[0] = array[0]
d[1] = max(array[0], array[1]) # 첫번째 칸과 두번째 칸 뭐를 털지 비교
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2]+array[i]) # 현재 위치를 털지 아니면 이전 칸을 털지 비교

print(d[n-1])
